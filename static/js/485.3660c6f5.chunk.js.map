{"version":3,"file":"static/js/485.3660c6f5.chunk.js","mappings":"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","sources":["pages/styledPages/Movies.styled.js","pages/Movies.jsx","utils/MovieApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const FormMovie = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  margin-top: 50px;\n`;\n\nexport const InputForm = styled.input`\n  width: 300px;\n  height: 30px;\n  border-radius: 6px;\n  outline: none;\n  border: none;\n  padding-left: 10px;\n  font-size: 18px;\n\n  &:focus {\n    outline: 2px solid blue;\n  }\n`;\n\nexport const ButtonFrom = styled.button`\n  margin-left: 20px;\n  width: 100px;\n  height: 30px;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  border-radius: 5px;\n  background-color: black;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n  transition: 1000ms background-color;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    animation: 3s infinite alternate slidein;\n  }\n`;\n\nexport const Spinner = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 30px 0;\n`;\n\nexport const ItemSearch = styled.ul`\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  list-style: none;\n`;\n\nexport const LinkSearch = styled.li`\n  margin-right: auto;\n`;\n\nexport const ImageSearch = styled.img`\n  border-radius: 5px;\n  box-shadow: 1px 2px 4px 1px rgba(0, 0, 0, 0.75);\n  height: 450px;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const NameFilm = styled.p`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n  text-decoration: none;\n  padding: 20px;\n  max-width: 200px;\n`;\n\nexport const SearchNavLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  font-size: 20px;\n  font-weight: bold;\n  &:hover {\n    color: orange;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Outlet,\n  useLocation,\n  useSearchParams,\n} from 'react-router-dom';\nimport { PacmanLoader } from 'react-spinners';\nimport { SearchMovieApi } from 'utils/MovieApi';\nimport { ButtonFrom, FormMovie, ImageSearch, InputForm, ItemSearch, LinkSearch, NameFilm, SearchNavLink, Spinner } from './styledPages/Movies.styled';\n\nexport default function Movies() {\n  const [film, setFilm] = useState([]);\n  const [query, setQuery] = useState(null);\n  const [btn, setBtn] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const searchQuery = searchParams.get('query') ?? '';\n\n  const handleQuery = e => {\n    setBtn(false);\n    const query = e.target.value;\n    setQuery(query !== '' ? { query } : {});\n    // console.log(query);\n  };\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    setSearchParams(query);\n    if (!query) {\n      setBtn(true);\n    }\n  };\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    console.log(searchQuery);\n    setLoading(true);\n    SearchMovieApi(searchQuery)\n      .then(({ data }) => setFilm(data.results))\n      .catch(error => console.log(error.message))\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [searchQuery]);\n\n  return (\n    <>\n      <section>\n        <FormMovie onSubmit={handleSubmitForm}>\n          <label>\n            <InputForm placeholder=\"Enter the title\" onChange={handleQuery} />\n          </label>\n          <ButtonFrom disabled={btn} type=\"submit\">\n            Search\n          </ButtonFrom>\n        </FormMovie>\n              <Spinner>\n          {loading && <PacmanLoader color=\"orange\" />}\n        </Spinner>\n        \n      </section>\n      <section>\n        <ItemSearch>\n          {' '}\n          {film.map(({ id, poster_path, title }) => {\n            return (\n              <LinkSearch key={id}>\n                <SearchNavLink to={`/movies/${id}`} state={{ from: location }}>\n                  <ImageSearch width='300px'\n                    src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                    alt={title}\n                  />\n                  <NameFilm>{title}</NameFilm>\n                </SearchNavLink>\n              </LinkSearch>\n            );\n          })}\n          \n          <Outlet />\n        </ItemSearch>\n      </section>\n    </>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = '34ec28facaf098a1035125630014210f';\n\nexport const MovieApi = async () => {\n  const response = await axios.get(`trending/movie/day`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response;\n};\n\nexport const SearchMovieApi = async query => {\n  const response = await axios.get(`search/movie`, {\n    params: {\n      query: query,\n      api_key: KEY,\n    },\n  });\n  return response;\n};\n\nexport const CompleteInfoMovieApi = async movie_id => {\n  const response = await axios.get(`movie/${movie_id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response;\n};\n\n\nexport const CastMovieApi = async movie_id => {\n  const response = await axios.get(`movie/${movie_id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response;\n};\n\nexport const ReviewsMovieApi = async movie_id => {\n  const response = await axios.get(`movie/${movie_id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response;\n};\n\n"],"names":["FormMovie","styled","InputForm","ButtonFrom","Spinner","ItemSearch","LinkSearch","ImageSearch","NameFilm","SearchNavLink","NavLink","Movies","useState","film","setFilm","query","setQuery","btn","setBtn","loading","setLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","searchQuery","get","useEffect","console","log","SearchMovieApi","then","data","results","catch","error","message","finally","onSubmit","e","preventDefault","placeholder","onChange","target","value","disabled","type","PacmanLoader","color","map","id","poster_path","title","to","state","from","width","src","alt","axios","KEY","MovieApi","params","api_key","response","CompleteInfoMovieApi","movie_id","CastMovieApi","ReviewsMovieApi"],"sourceRoot":""}